--------------------------------------------------------------
-- Database creation Script

-- Auto-Generated by QSEE-SuperLite (c) 2001-2004 QSEE-Technologies Ltd.

-- Verbose generation: ON

-- note: spaces within table/column names have been replaced by underscores (_)

-- Target DB: SQL2

-- Entity Model :Entity Relationship Diagram

-- To drop the tables generated by this script run -
--   'C:\Users\sunda\OneDrive\Desktop\New folder\SQL_drop.sql'

--------------------------------------------------------------



--------------------------------------------------------------
-- Table Creation --

-- Each entity on the model is represented by a table that needs to be created within the Database.
-- Within SQL new tables are created using the CREATE TABLE command.
-- When a table is created its name and its attributes are defined.
-- The values of which are derived from those specified on the model.
-- Certain constraints are sometimes also specified, such as identification of primary keys.

-- Create a Database table to represent the "sales" entity.
CREATE TABLE sales(
	sales_id	INTEGER NOT NULL,
	furnitur_id	INTEGER NOT NULL UNIQUE,
	location_id	INTEGER NOT NULL UNIQUE,
	time_id	INTEGER NOT NULL UNIQUE,
	customer_id	INTEGER NOT NULL UNIQUE,
	type_id	INTEGER NOT NULL UNIQUE,
	material_id	INTEGER NOT NULL UNIQUE,
	category_id	INTEGER NOT NULL UNIQUE,
	quantity	NUMERIC(8,2) NOT NULL,
	income	NUMERIC(8,2) NOT NULL,
	discount	NUMERIC(8,2) NOT NULL,
	-- Specify the PRIMARY KEY constraint for table "sales".
	-- This indicates which attribute(s) uniquely identify each row of data.
	CONSTRAINT	pk_sales PRIMARY KEY (sales_id)
);

-- Create a Database table to represent the "dimTime" entity.
CREATE TABLE dimTime(
	time_id	INTEGER NOT NULL,
	day	TIMESTAMP(8) NOT NULL,
	month	TIMESTAMP(8) NOT NULL,
	year	TIMESTAMP(8) NOT NULL,
	-- Specify the PRIMARY KEY constraint for table "dimTime".
	-- This indicates which attribute(s) uniquely identify each row of data.
	CONSTRAINT	pk_dimTime PRIMARY KEY (time_id)
);

-- Create a Database table to represent the "dimCustomer" entity.
CREATE TABLE dimCustomer(
	customer_id	INTEGER NOT NULL,
	first_name	VARCHAR(50),
	last_name	VARCHAR(50),
	gender	VARCHAR(50),
	age	NUMERIC(8,2),
	-- Specify the PRIMARY KEY constraint for table "dimCustomer".
	-- This indicates which attribute(s) uniquely identify each row of data.
	CONSTRAINT	pk_dimCustomer PRIMARY KEY (customer_id)
);

-- Create a Database table to represent the "dimLocation" entity.
CREATE TABLE dimLocation(
	location_id	INTEGER NOT NULL,
	city	VARCHAR(100),
	region	VARCHAR(100),
	state	VARCHAR(100),
	-- Specify the PRIMARY KEY constraint for table "dimLocation".
	-- This indicates which attribute(s) uniquely identify each row of data.
	CONSTRAINT	pk_dimLocation PRIMARY KEY (location_id)
);

-- Create a Database table to represent the "dimFurniture" entity.
CREATE TABLE dimFurniture(
	furnitur_id	INTEGER NOT NULL,
	furniture_name	VARCHAR(50),
	-- Specify the PRIMARY KEY constraint for table "dimFurniture".
	-- This indicates which attribute(s) uniquely identify each row of data.
	CONSTRAINT	pk_dimFurniture PRIMARY KEY (furnitur_id)
);

-- Create a Database table to represent the "dimType" entity.
CREATE TABLE dimType(
	type_id	INTEGER NOT NULL,
	type_name	VARCHAR(50),
	-- Specify the PRIMARY KEY constraint for table "dimType".
	-- This indicates which attribute(s) uniquely identify each row of data.
	CONSTRAINT	pk_dimType PRIMARY KEY (type_id)
);

-- Create a Database table to represent the "dimMaterial" entity.
CREATE TABLE dimMaterial(
	material_id	INTEGER NOT NULL,
	material_name	VARCHAR(50),
	-- Specify the PRIMARY KEY constraint for table "dimMaterial".
	-- This indicates which attribute(s) uniquely identify each row of data.
	CONSTRAINT	pk_dimMaterial PRIMARY KEY (material_id)
);

-- Create a Database table to represent the "dimCategory" entity.
CREATE TABLE dimCategory(
	category_id	INTEGER NOT NULL,
	category_name	VARCHAR(50),
	-- Specify the PRIMARY KEY constraint for table "dimCategory".
	-- This indicates which attribute(s) uniquely identify each row of data.
	CONSTRAINT	pk_dimCategory PRIMARY KEY (category_id)
);


--------------------------------------------------------------
-- Alter Tables to add fk constraints --

-- Now all the tables have been created the ALTER TABLE command is used to define some additional
-- constraints.  These typically constrain values of foreign keys to be associated in some way
-- with the primary keys of related tables.  Foreign key constraints can actually be specified
-- when each table is created, but doing so can lead to dependency problems within the script
-- i.e. tables may be referenced before they have been created.  This method is therefore safer.

-- Alter table to add new constraints required to implement the "location_fk" relationship

-- This constraint ensures that the foreign key of table "sales"
-- correctly references the primary key of table "dimLocation"

ALTER TABLE sales ADD CONSTRAINT fk1_sales_to_dimLocation FOREIGN KEY(location_id) REFERENCES dimLocation(location_id) ON DELETE CASCADE;

-- Alter table to add new constraints required to implement the "furniture_fk" relationship

-- This constraint ensures that the foreign key of table "sales"
-- correctly references the primary key of table "dimFurniture"

ALTER TABLE sales ADD CONSTRAINT fk2_sales_to_dimFurniture FOREIGN KEY(furnitur_id) REFERENCES dimFurniture(furnitur_id) ON DELETE CASCADE;

-- Alter table to add new constraints required to implement the "time_fk" relationship

-- This constraint ensures that the foreign key of table "sales"
-- correctly references the primary key of table "dimTime"

ALTER TABLE sales ADD CONSTRAINT fk3_sales_to_dimTime FOREIGN KEY(time_id) REFERENCES dimTime(time_id) ON DELETE CASCADE;

-- Alter table to add new constraints required to implement the "customer_fk" relationship

-- This constraint ensures that the foreign key of table "sales"
-- correctly references the primary key of table "dimCustomer"

ALTER TABLE sales ADD CONSTRAINT fk4_sales_to_dimCustomer FOREIGN KEY(customer_id) REFERENCES dimCustomer(customer_id) ON DELETE CASCADE;

-- Alter table to add new constraints required to implement the "type_fk" relationship

-- This constraint ensures that the foreign key of table "sales"
-- correctly references the primary key of table "dimType"

ALTER TABLE sales ADD CONSTRAINT fk5_sales_to_dimType FOREIGN KEY(type_id) REFERENCES dimType(type_id) ON DELETE CASCADE;

-- Alter table to add new constraints required to implement the "material_fk" relationship

-- This constraint ensures that the foreign key of table "sales"
-- correctly references the primary key of table "dimMaterial"

ALTER TABLE sales ADD CONSTRAINT fk6_sales_to_dimMaterial FOREIGN KEY(material_id) REFERENCES dimMaterial(material_id) ON DELETE CASCADE;

-- Alter table to add new constraints required to implement the "category_fk" relationship

-- This constraint ensures that the foreign key of table "sales"
-- correctly references the primary key of table "dimCategory"

ALTER TABLE sales ADD CONSTRAINT fk7_sales_to_dimCategory FOREIGN KEY(category_id) REFERENCES dimCategory(category_id) ON DELETE CASCADE;


--------------------------------------------------------------
-- End of DDL file auto-generation
--------------------------------------------------------------
